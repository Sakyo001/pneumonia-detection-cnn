import PDFDocument from 'pdfkit';
import { Readable } from 'stream';
import { promisify } from 'util';
import fetch from 'node-fetch';
import * as fs from 'fs';
import * as path from 'path';

interface ReportData {
  id: string;
  reference_number: string;
  image_url: string;
  analysis_result: string;
  confidence_score: number;
  created_at: string;
  doctor_name: string;
  pneumonia_type: string | null;
  severity: string | null;
  recommended_action: string | null;
  patient_name: string;
}

export async function generatePDFReport(data: ReportData): Promise<Buffer> {
  return new Promise(async (resolve, reject) => {
    try {
      // Create a new PDF document
      const doc = new PDFDocument({
        size: 'A4',
        margin: 50,
        info: {
          Title: `X-Ray Analysis Report - ${data.reference_number}`,
          Author: 'MedRecord Hub',
          Subject: 'X-Ray Analysis Report',
          Keywords: 'x-ray, pneumonia, medical, report',
          CreationDate: new Date()
        }
      });

      // Collect chunks of the PDF
      const chunks: Buffer[] = [];
      doc.on('data', (chunk) => chunks.push(chunk));
      doc.on('end', () => resolve(Buffer.concat(chunks)));

      // Add header with logo
      doc.fontSize(24).font('Helvetica-Bold').text('MedRecord Hub', { align: 'center' });
      doc.moveDown();
      doc.fontSize(18).font('Helvetica-Bold').text('X-Ray Analysis Report', { align: 'center' });
      doc.moveDown();

      // Add reference number and date
      doc.fontSize(12).font('Helvetica');
      doc.text(`Reference Number: ${data.reference_number}`, { align: 'left' });
      doc.text(`Date: ${new Date(data.created_at).toLocaleDateString()}`, { align: 'left' });
      doc.moveDown();

      // Add patient information
      doc.fontSize(14).font('Helvetica-Bold').text('Patient Information');
      doc.fontSize(12).font('Helvetica');
      doc.text(`Name: ${data.patient_name}`);
      doc.text(`Doctor: ${data.doctor_name}`);
      doc.moveDown();

      // Add diagnosis section
      doc.fontSize(14).font('Helvetica-Bold').text('Diagnosis');
      doc.fontSize(12).font('Helvetica');
      
      // Add diagnosis result with color
      const diagnosisColor = data.analysis_result === 'Normal' ? '#28a745' : '#dc3545';
      doc.fillColor(diagnosisColor);
      doc.text(`Result: ${data.analysis_result}`, { continued: true });
      doc.fillColor('#000000');
      doc.text(` (Confidence: ${(data.confidence_score * 100).toFixed(1)}%)`);
      
      // Add additional diagnosis details if available
      if (data.pneumonia_type) {
        doc.text(`Type: ${data.pneumonia_type}`);
      }
      
      if (data.severity) {
        doc.text(`Severity: ${data.severity}`);
      }
      
      doc.moveDown();

      // Add recommended action if available
      if (data.recommended_action) {
        doc.fontSize(14).font('Helvetica-Bold').text('Recommended Action');
        doc.fontSize(12).font('Helvetica');
        doc.text(data.recommended_action);
        doc.moveDown();
      }

      // Add X-ray image
      doc.fontSize(14).font('Helvetica-Bold').text('X-Ray Image');
      doc.moveDown(0.5);
      
      try {
        // Fetch the image
        const imageResponse = await fetch(`${process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'}${data.image_url}`);
        const imageBuffer = await imageResponse.buffer();
        
        // Add the image to the PDF
        doc.image(imageBuffer, {
          fit: [500, 300],
          align: 'center'
        });
      } catch (error) {
        console.error('Error adding image to PDF:', error);
        doc.text('Image not available', { align: 'center' });
      }
      
      doc.moveDown();

      // Add footer
      doc.fontSize(10).font('Helvetica');
      doc.text('This report was generated by MedRecord Hub. For medical advice, please consult with your healthcare provider.', { align: 'center' });
      doc.text('Â© 2023 MedRecord Hub. All rights reserved.', { align: 'center' });

      // Finalize the PDF
      doc.end();
    } catch (error) {
      reject(error);
    }
  });
} 